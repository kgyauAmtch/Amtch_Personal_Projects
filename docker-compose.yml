# version: "3.8" # Specify the version of Docker Compose to use

services:
  db:
    image: postgres:15  # Use Postgres version 15
    restart: always  # Ensure the service restarts automatically if it fails
    environment:
      POSTGRES_USER: sparkproj  # Custom Postgres username
      POSTGRES_PASSWORD: pass_word    # Strong password for Postgres
      POSTGRES_DB: realtimedata      # Custom default database
    ports:
      - "5433:5432"  # Map local port 5433 to container's port 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent volume for Postgres data
      - ./db/postgres_setup.sql:/docker-entrypoint-initdb.d/postgres_setup.sql  # Custom init SQL script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sparkproj -d realtimedata"]  # Health check to ensure Postgres is ready
      interval: 5s  # Check every 5 seconds
      timeout: 5s   # Timeout after 5 seconds
      retries: 10   # Retry 10 times before marking the service as unhealthy
    networks:
      - real_data_network  # Connect the service to the custom network

  data_generator:
    image: python:3.10-slim
    container_name: data_generator
    volumes:
      - ./src:/opt/spark/work-dir
      - ./data:/opt/spark/data  
    working_dir: /opt/spark/work-dir
    command: >
      sh -c "pip install faker  && python -u data_creation.py"
    depends_on:
      - db
    networks:
      - real_data_network

  spark:
    image: bitnami/spark:latest  # Use the Bitnami Spark image
    volumes:
      - ./src:/opt/spark/work-dir  # Mount the src folder to the working directory inside the container
      - ./data:/opt/spark/data   # Mount the data folder to the working directory inside the container
    working_dir: /opt/spark/work-dir  # Set working directory for Spark
    command: >
      spark-submit
       --jars /opt/spark/work-dir/postgresql-42.7.5.jar
       /opt/spark/work-dir/spark_streaming_to_postgres.py
    ports:
      - "4041:4040"  # Map local/host port 4041 to container port 4040
    depends_on:
      db:
        condition: service_healthy  # Wait until the Postgres service is healthy
    networks:
      - real_data_network  # Connect the service to the custom network

volumes:
  postgres_data:  # Define the volume for Postgres data storage

networks:
  real_data_network:
    driver: bridge  # Use the bridge network driver for communication between containers



